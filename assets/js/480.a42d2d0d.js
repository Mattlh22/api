(window.webpackJsonp=window.webpackJsonp||[]).push([[480],{827:function(e,t,s){"use strict";s.r(t);var r=s(42),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[s("strong",[e._v("Polkadot JS API")])]),e._v(" "),s("blockquote",[s("p",[s("RouterLink",{attrs:{to:"/types/"}},[e._v("README")]),e._v(" / "),s("RouterLink",{attrs:{to:"/types/globals.html"}},[e._v("Globals")]),e._v(" / "),s("RouterLink",{attrs:{to:"/types/modules/_packages_types_src_types_registry_.html"}},[e._v('"packages/types/src/types/registry"')]),e._v(" / RegisteredTypes")],1)]),e._v(" "),s("h1",{attrs:{id:"interface-registeredtypes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#interface-registeredtypes"}},[e._v("#")]),e._v(" Interface: RegisteredTypes")]),e._v(" "),s("h2",{attrs:{id:"hierarchy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hierarchy"}},[e._v("#")]),e._v(" Hierarchy")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("RegisteredTypes")])])]),e._v(" "),s("h2",{attrs:{id:"index"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#index"}},[e._v("#")]),e._v(" Index")]),e._v(" "),s("h3",{attrs:{id:"properties"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/types/interfaces/_packages_types_src_types_registry_.registeredtypes.html#types"}},[e._v("types")])],1),e._v(" "),s("li",[s("RouterLink",{attrs:{to:"/types/interfaces/_packages_types_src_types_registry_.registeredtypes.html#typesalias"}},[e._v("typesAlias")])],1),e._v(" "),s("li",[s("RouterLink",{attrs:{to:"/types/interfaces/_packages_types_src_types_registry_.registeredtypes.html#typesbundle"}},[e._v("typesBundle")])],1),e._v(" "),s("li",[s("RouterLink",{attrs:{to:"/types/interfaces/_packages_types_src_types_registry_.registeredtypes.html#typeschain"}},[e._v("typesChain")])],1),e._v(" "),s("li",[s("RouterLink",{attrs:{to:"/types/interfaces/_packages_types_src_types_registry_.registeredtypes.html#typesspec"}},[e._v("typesSpec")])],1)]),e._v(" "),s("h2",{attrs:{id:"properties-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#properties-2"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),s("h3",{attrs:{id:"types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#types"}},[e._v("#")]),e._v(" types")]),e._v(" "),s("p",[e._v("• "),s("code",[e._v("Optional")]),e._v(" "),s("strong",[e._v("types")]),e._v(": "),s("RouterLink",{attrs:{to:"/types/modules/_packages_types_src_types_registry_.html#registrytypes"}},[e._v("RegistryTypes")])],1),e._v(" "),s("p",[s("em",[e._v("Defined in "),s("a",{attrs:{href:"https://github.com/polkadot-js/api/blob/27c58b930/packages/types/src/types/registry.ts#L118",target:"_blank",rel:"noopener noreferrer"}},[e._v("packages/types/src/types/registry.ts:118"),s("OutboundLink")],1)])]),e._v(" "),s("p",[s("strong",[s("code",[e._v("description")])]),e._v(" Additional types used by runtime modules. This is necessary if the runtime modules\nuses types not available in the base Substrate runtime.")]),e._v(" "),s("hr"),e._v(" "),s("h3",{attrs:{id:"typesalias"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typesalias"}},[e._v("#")]),e._v(" typesAlias")]),e._v(" "),s("p",[e._v("• "),s("code",[e._v("Optional")]),e._v(" "),s("strong",[e._v("typesAlias")]),e._v(": Record<string, "),s("RouterLink",{attrs:{to:"/types/modules/_packages_types_src_types_registry_.html#overridemoduletype"}},[e._v("OverrideModuleType")]),e._v(">")],1),e._v(" "),s("p",[s("em",[e._v("Defined in "),s("a",{attrs:{href:"https://github.com/polkadot-js/api/blob/27c58b930/packages/types/src/types/registry.ts#L122",target:"_blank",rel:"noopener noreferrer"}},[e._v("packages/types/src/types/registry.ts:122"),s("OutboundLink")],1)])]),e._v(" "),s("p",[s("strong",[s("code",[e._v("description")])]),e._v(" Alias an types, as received via the metadata, to a JS-specific type to avoid conflicts. For instance, you can rename the "),s("code",[e._v("Proposal")]),e._v(" in the "),s("code",[e._v("treasury")]),e._v(" module to "),s("code",[e._v("TreasuryProposal")]),e._v(" as to not have conflicts with the one for democracy.")]),e._v(" "),s("hr"),e._v(" "),s("h3",{attrs:{id:"typesbundle"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typesbundle"}},[e._v("#")]),e._v(" typesBundle")]),e._v(" "),s("p",[e._v("• "),s("code",[e._v("Optional")]),e._v(" "),s("strong",[e._v("typesBundle")]),e._v(": "),s("RouterLink",{attrs:{to:"/types/interfaces/_packages_types_src_types_registry_.overridebundletype.html"}},[e._v("OverrideBundleType")])],1),e._v(" "),s("p",[s("em",[e._v("Defined in "),s("a",{attrs:{href:"https://github.com/polkadot-js/api/blob/27c58b930/packages/types/src/types/registry.ts#L126",target:"_blank",rel:"noopener noreferrer"}},[e._v("packages/types/src/types/registry.ts:126"),s("OutboundLink")],1)])]),e._v(" "),s("p",[s("strong",[s("code",[e._v("description")])]),e._v(" A bundle of types related to chain & spec that is injected based on what the chain contains")]),e._v(" "),s("hr"),e._v(" "),s("h3",{attrs:{id:"typeschain"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typeschain"}},[e._v("#")]),e._v(" typesChain")]),e._v(" "),s("p",[e._v("• "),s("code",[e._v("Optional")]),e._v(" "),s("strong",[e._v("typesChain")]),e._v(": Record<string, "),s("RouterLink",{attrs:{to:"/types/modules/_packages_types_src_types_registry_.html#registrytypes"}},[e._v("RegistryTypes")]),e._v(">")],1),e._v(" "),s("p",[s("em",[e._v("Defined in "),s("a",{attrs:{href:"https://github.com/polkadot-js/api/blob/27c58b930/packages/types/src/types/registry.ts#L130",target:"_blank",rel:"noopener noreferrer"}},[e._v("packages/types/src/types/registry.ts:130"),s("OutboundLink")],1)])]),e._v(" "),s("p",[s("strong",[s("code",[e._v("description")])]),e._v(" Additional types that are injected based on the chain we are connecting to. There are keyed by the chain, i.e. "),s("code",[e._v("{ 'Kusama CC1': { ... } }")])]),e._v(" "),s("hr"),e._v(" "),s("h3",{attrs:{id:"typesspec"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typesspec"}},[e._v("#")]),e._v(" typesSpec")]),e._v(" "),s("p",[e._v("• "),s("code",[e._v("Optional")]),e._v(" "),s("strong",[e._v("typesSpec")]),e._v(": Record<string, "),s("RouterLink",{attrs:{to:"/types/modules/_packages_types_src_types_registry_.html#registrytypes"}},[e._v("RegistryTypes")]),e._v(">")],1),e._v(" "),s("p",[s("em",[e._v("Defined in "),s("a",{attrs:{href:"https://github.com/polkadot-js/api/blob/27c58b930/packages/types/src/types/registry.ts#L134",target:"_blank",rel:"noopener noreferrer"}},[e._v("packages/types/src/types/registry.ts:134"),s("OutboundLink")],1)])]),e._v(" "),s("p",[s("strong",[s("code",[e._v("description")])]),e._v(" Additional types that are injected based on the type of node we are connecting to, as set via specName in the runtime version. There are keyed by the node, i.e. "),s("code",[e._v("{ 'edgeware': { ... } }")])])])}),[],!1,null,null,null);t.default=a.exports}}]);